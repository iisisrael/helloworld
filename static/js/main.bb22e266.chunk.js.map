{"version":3,"sources":["components/header/header.js","index.js","serviceWorker.js","components/header/is_books.jpg"],"names":["Avatar","props","className","src","url","alt","text","Contact","target","rel","href","icon","HeaderPrint","isBooks","faLinkedin","faMobile","faEnvelope","Header","keyName","print","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","QueryString","parse","search","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"mVAQA,SAASA,EAAOC,GAEZ,OACI,yBAAKC,UAAU,SACXC,IAAKF,EAAMG,IACXC,IAAKJ,EAAMK,OAKvB,SAASC,EAAQN,GAEb,OAAIA,EAAMG,IAEF,uBAAGF,UAAU,UAAUM,OAAO,SAASC,IAAI,sBAAsBC,KAAMT,EAAMG,KACzE,kBAAC,IAAD,CAAiBO,KAAMV,EAAMU,OAC5BV,EAAMK,MAAQL,EAAMG,KAMzB,0BAAMF,UAAU,WACZ,kBAAC,IAAD,CAAiBS,KAAMV,EAAMU,OAC5BV,EAAMK,MAgCvB,SAASM,IAEL,OACI,4BAAQV,UAAU,UACd,kBAACF,EAAD,CAAQI,IAAKS,IAASP,KAAK,gEAC3B,kDACA,6CACA,kBAACC,EAAD,CAASI,KAAMG,IAAYV,IAAI,+CAC/B,kBAACG,EAAD,CAASI,KAAMI,IAAUX,IAAI,mBAAmBE,KAAK,iBACrD,kBAACC,EAAD,CAASI,KAAMK,IAAYV,KAAK,yCAK7BW,ICvEMC,EDuEND,EAxCf,SAAgBhB,GAEZ,OAAIA,EAAMkB,MAEF,kBAACP,EAAD,MAKJ,4BAAQV,UAAU,cACd,kBAACkB,EAAA,EAAD,KACI,kBAACpB,EAAD,CAAQI,IAAKS,IAASP,KAAK,iEAE/B,kBAACc,EAAA,EAAD,KACI,wBAAIlB,UAAU,aAAd,sBACA,wBAAIA,UAAU,aAAd,kBAEJ,kBAACkB,EAAA,EAAD,CAAKlB,UAAU,aACX,kBAACK,EAAD,CAASI,KAAMG,IAAYV,IAAI,+CAC/B,kBAACG,EAAD,CAASI,KAAMI,IAAUX,IAAI,mBAAmBE,KAAK,iBACrD,kBAACC,EAAD,CAASI,KAAMK,IAAYV,KAAK,2C,iBE9C5Be,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DDJNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,CAAQT,OATKD,EASc,QALxBA,KAFOW,IAAYC,MAAMR,OAAOC,SAASQ,YAShDC,SAASC,eAAe,SCiHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBCzI5BC,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.bb22e266.chunk.js","sourcesContent":["import React from 'react';\nimport './header.scss';\nimport isBooks from './is_books.jpg';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLinkedin } from '@fortawesome/free-brands-svg-icons';\nimport { faEnvelope, faMobile } from '@fortawesome/free-solid-svg-icons';\nimport Col from 'react-bootstrap/Col';\n\nfunction Avatar(props)\n{\n    return (\n        <img className=\"avatar\"\n            src={props.url}\n            alt={props.text}\n        />\n    );\n}\n\nfunction Contact(props)\n{\n    if (props.url) {\n        return (\n            <a className=\"contact\" target=\"_blank\" rel=\"noopener noreferrer\" href={props.url}>\n                <FontAwesomeIcon icon={props.icon} />\n                {props.text || props.url}\n            </a>\n        );\n    }\n    else {\n        return (\n            <span className=\"contact\">\n                <FontAwesomeIcon icon={props.icon} />\n                {props.text}\n            </span>\n        );\n    }\n}\n\nfunction Header(props)\n{\n    if (props.print) {\n        return (\n            <HeaderPrint />\n        );\n    }\n\n    return (\n        <header className=\"header row\">\n            <Col>\n                <Avatar url={isBooks} text='Stunning photo of Israel in front of his sci-fi book shelf.' />\n            </Col>\n            <Col>\n                <h1 className=\"text-left\">Israel J. Carberry</h1>\n                <h3 className=\"text-left\">Hello, world.</h3>\n            </Col>\n            <Col className=\"text-left\">\n                <Contact icon={faLinkedin} url='https://www.linkedin.com/in/israelcarberry' />\n                <Contact icon={faMobile} url='tel:+15122340382' text='512.234.0382' />\n                <Contact icon={faEnvelope} text='1025 2nd St, Hempstead, Texas 77445' />\n            </Col>\n        </header>\n    );\n}\n\nfunction HeaderPrint()\n{\n    return (\n        <header className=\"header\">\n            <Avatar url={isBooks} text='Stunning photo of Israel in front of his sci-fi book shelf.' />\n            <h1>Israel J. Carberry</h1>\n            <h3>Hello, world.</h3>\n            <Contact icon={faLinkedin} url='https://www.linkedin.com/in/israelcarberry' />\n            <Contact icon={faMobile} url='tel:+15122340382' text='512.234.0382' />\n            <Contact icon={faEnvelope} text='1025 2nd St, Hempstead, Texas 77445' />\n        </header>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Header from './components/header/header';\nimport QueryString from 'query-string';\nimport * as serviceWorker from './serviceWorker';\n\nfunction hasQueryArg(keyName)\n{\n    const query = QueryString.parse(window.location.search);\n\n    return keyName in query;\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <Header print={hasQueryArg('print')} />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","module.exports = __webpack_public_path__ + \"static/media/is_books.92e051e5.jpg\";"],"sourceRoot":""}